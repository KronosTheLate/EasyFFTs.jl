var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = EasyFFTs","category":"page"},{"location":"#EasyFFTs","page":"Home","title":"EasyFFTs","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for EasyFFTs.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [EasyFFTs]","category":"page"},{"location":"#EasyFFTs.EasyFFT","page":"Home","title":"EasyFFTs.EasyFFT","text":"EasyFFT(frequencies, response)\n\nA type to hold the response and corresponding frequencies of  a discrete fourier transform. Has the fields freq and resp, which can be accessed by dot syntax. Mainly intended to be constructed through easyfft.\n\n\n\n\n\n","category":"type"},{"location":"#EasyFFTs.domfreq","page":"Home","title":"EasyFFTs.domfreq","text":"domfreq(ef)\ndomfreq(ef, n=5, t=0.1, window=length(ef)//50)\n\nFind and return a vector containing the dominant frequencies in ef.\n\nKeyword arguments\n\nn: The maximal of dominant peaks to find. Defaults to 5\nt: Minimal magnitude as fraction of maximal magnitude. Defaults to 0.1\nwindow: Minimal difference in index between any larger peak. Defaults to length(ef)//50\n\nSee also: finddomfreq\n\n\n\n\n\n","category":"function"},{"location":"#EasyFFTs.easyfft","page":"Home","title":"EasyFFTs.easyfft","text":"easyfft(s)\neasyfft(s, fs)\n\nCompute the Discrete Fourier Transform (DFT) of the input vector s, scaling by 1/length(s) by default. This function uses FFTW.rfft if s has real elements, and FFTW.fft otherwise.\n\nThe output is an EasyFFT object, with fields freq and resp containing the frequences and response respectivly.\n\nKeyword arguments\n\nscalebylength::Bool: determines if the response is scaled by its length. Defaults to true.\n\nSee also easymirror to get the full symmetric spectrum of real signals.\n\nExamples\n\njulia> using EasyFFTs\n\njulia> fs = 100;  # 100 samples per second\n\njulia> timestamps = range(0, 1, step = 1/fs);\n\njulia> s = sin.(2π * 2 * timestamps); # sine of frequency = 2 Hz\n\njulia> easyfft(s, fs)\nEasyFFT with 51 samples.\nDominant component(s):       \n   Frequency  │  Magnitude   \n╺━━━━━━━━━━━━━┿━━━━━━━━━━━━━╸\n    1.9802    │   0.98461    \n\njulia> easyfft(s)  # `fs` defaults to 1\nEasyFFT with 51 samples.\nDominant component(s):       \n   Frequency  │  Magnitude   \n╺━━━━━━━━━━━━━┿━━━━━━━━━━━━━╸\n   0.019802   │   0.98461    \n              ╵                      \n\n\n\n\n\n\n","category":"function"},{"location":"#EasyFFTs.easymirror","page":"Home","title":"EasyFFTs.easymirror","text":"easymirror(v::AbstractVector)\neasymirror(ef::EasyFFT)\n\nGiven a one-sided spectrum, return a two-sided version by \"mirroring\" about 0. This convenience function also ajusts the amplitude of v, or the amplitudes of ef.resp appropriately.\n\nExamples\n\njulia> using EasyFFTs\n\njulia> fs = 100;  # 100 samples per second\n\njulia> timestamps = range(0, 1, step = 1/fs);\n\njulia> s = sin.(2π * 2 * timestamps); # sine of frequency = 2 Hz\n\njulia> easymirror(ef)\nEasyFFT with 101 samples.\nDominant component(s):              ╷              \n   Frequency  │  Magnitude   \n╺━━━━━━━━━━━━━┿━━━━━━━━━━━━━╸\n    -1.9802   │   0.4923     \n╶─────────────┼─────────────╴\n    1.9802    │   0.4923     \n\n\n\n\n\n","category":"function"},{"location":"#EasyFFTs.finddomfreq-Tuple{EasyFFTs.EasyFFT}","page":"Home","title":"EasyFFTs.finddomfreq","text":"finddomfreq(ef)\nfinddomfreq(ef; n=5, t=0.1, window=length(ef)//50)\n\nFind and return a vector containing the indices of the  dominant frequency components in ef.\n\nThis function is used internally in the show method for EasyFFT.\n\nKeyword arguments\n\nn: The maximal of dominant peaks to find. Defaults to 5\nt: Minimal magnitude as fraction of maximal magnitude. Defaults to 0.1\nwindow: Minimal difference in index between any larger peak. Defaults to length(ef)//50\n\nSee also: domfreq\n\n\n\n\n\n","category":"method"},{"location":"#EasyFFTs.magnitude-Tuple{EasyFFTs.EasyFFT}","page":"Home","title":"EasyFFTs.magnitude","text":"magnitude(ef::EasyFFT)\n\nThe absolute values of the response vector.\n\nSee also: phase, phased\n\n\n\n\n\n","category":"method"},{"location":"#EasyFFTs.phase-Tuple{EasyFFTs.EasyFFT}","page":"Home","title":"EasyFFTs.phase","text":"phase(ef::EasyFFT)\n\nThe phase of the response vector.\n\nSee also: magnitude, phased\n\n\n\n\n\n","category":"method"},{"location":"#EasyFFTs.phased-Tuple{EasyFFTs.EasyFFT}","page":"Home","title":"EasyFFTs.phased","text":"phased(ef::EasyFFT)\n\nThe phase of the response vector in degrees.\n\nSee also: phase, magnitude\n\n\n\n\n\n","category":"method"}]
}
