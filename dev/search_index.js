var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = EasyFFTs","category":"page"},{"location":"#EasyFFTs","page":"Home","title":"EasyFFTs","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for EasyFFTs.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [EasyFFTs]","category":"page"},{"location":"#EasyFFTs.dominantfrequencies","page":"Home","title":"EasyFFTs.dominantfrequencies","text":"dominantfrequencies(ef, n=5, t=0.1, window=length(ef)//50)\n\nFind the n or fewer dominant frequencies in ef, such that the corresponding magnitude is larger than t times the maximum, and at least window indices away from any larger peaks.\n\n\n\n\n\n","category":"function"},{"location":"#EasyFFTs.easyfft","page":"Home","title":"EasyFFTs.easyfft","text":"easyfft(s)\neasyfft(s, fs)\n\nKeyword arguments\n\nscalebylength::Bool: determines if the response is scaled by its length. Defaults to true.\n\nCompute the Discrete Fourier Transform (DFT) of the input vector s, scaling by length(s) by default. This function uses FFTW.rfft if s has real elements, and FFTW.fft otherwise.\n\nThe output is an EasyFFT object, with fields freq and resp containing the frequences and response respectivly.\n\nSee also easymirror to get a symestric spectrum.\n\nExamples\n\njulia> using EasyFFTs\n\njulia> s = sin.(1:5);\n\njulia> ef = easyfft(s)\nEasyFFT with 3 samples, showing dominant frequencies f = [0.2, 0.4]\n\njulia> ef.resp\n3-element Vector{ComplexF64}:\n  0.0587205499074596 + 0.0im\n   0.441411013590527 - 0.76819000942203im\n 0.23045453212899036 - 0.08137937206396029im\n\n\njulia> ef = easyfft(s, 0.5)\nEasyFFT with 3 samples, showing dominant frequencies f = [0.1, 0.2]\n\n\n\n\n\n\n","category":"function"},{"location":"#EasyFFTs.easymirror","page":"Home","title":"EasyFFTs.easymirror","text":"easymirror(v::AbstractVector)\neasymirror(ef::EasyFFT)\n\nGiven a one-sided spectrum, return a two-sided version by \"mirroring\" about 0. This convenience function also ajusts the amplitude of v, or the amplitudes of ef.resp appropriately.\n\nExamples\n\njulia> easymirror(0:3)   # Mirroring the amplitudes\n7-element Vector{Float64}:\n 1.5\n 1.0\n 0.5\n 0.0\n 0.5\n 1.0\n 1.5\n\njulia> easymirror(fill(1, 4))   # Not halving the zero frequency component\n7-element Vector{Float64}:\n 0.5\n 0.5\n 0.5\n 1.0\n 0.5\n 0.5\n 0.5\n\n\njulia> ef = EasyFFTs.EasyFFT([0, 0.2, 0.4], [1, 2, 3]);\n\njulia> easymirror(ef)\nEasyFFT with 5 samples, showing dominant frequencies f = [-0.4, 0.4]\n\n\n\n\n\n","category":"function"},{"location":"#EasyFFTs.magnitude-Tuple{EasyFFTs.EasyFFT}","page":"Home","title":"EasyFFTs.magnitude","text":"magnitude(ef::EasyFFT)\n\nThe absolute values of the response vector.\n\nSee also: phase\n\n\n\n\n\n","category":"method"},{"location":"#EasyFFTs.phase-Tuple{EasyFFTs.EasyFFT}","page":"Home","title":"EasyFFTs.phase","text":"phase(ef::EasyFFT)\n\nThe phase of the response vector.\n\nSee also: magnitude\n\n\n\n\n\n","category":"method"}]
}
